#TO CALCULATE KS&T TEST, SUMMARY STATISTICS

import pandas as pd
from scipy.stats import ks_2samp, ttest_ind
import os

# Load the original data and imputed data
original_data_path = r'MERGED DATA UPDATED (EVERYTHINGout).xlsx'
imputed_data_path = r'imputed_dataset_0.1.xlsx'

# Read the original and imputed data
df_original = pd.read_excel(original_data_path)
df_imputed = pd.read_excel(imputed_data_path)

# Specify the columns of interest
columns_of_interest = ['BISi', 'SRi', 'BIS6', 'SR6', 'ABGpH', 'age', 'ambulate', 'aorticBalloon', 'arrythmia', 'BIS',
    'cervascD', 'civilianCPR', 'civilianDefib', 'cogImpair', 'contissD', 'contNeuroMuscBlock', 'COPD',
    'coronAngio', 'CPCprior', 'CPRmed', 'CTicu', 'CTsixH', 'deepSedation', 'defib', 'DNR', 'ECGresult',
    'echoWithin12', 'EEGcont', 'EEGicu', 'glasgow', 'glucAdm', 'HCO3Adm', 'heartFail', 'height', 'hospCondition',
    'hospTransfer', 'hypertension', 'ICUconditionAgit', 'ICUconditionAmb', 'ICUconditionCalm', 'ICUconditionDead',
    'ICUconditionDisorient', 'ICUconditionNonamb', 'ICUconditionNoninteract', 'ICUconditionOrient', 'initRhythm',
    'insulinDep', 'intermittentNeuroMuscBlock', 'lactateAdm', 'leukemia', 'lightSedation', 'liverD', 'LSwithdraw',
    'majorBleed', 'maligTumor', 'MAP60', 'MAP60sustain', 'mechCD', 'minAmb', 'minArrestTilTargTemp', 'minCPRmed',
    'minTilROSC', 'minTilROSCConfidence', 'MRIicu', 'myoclonus', 'myoInfarc', 'noninsulinDep', 'noSedation',
    'obesity', 'obeyCommand', 'obeyCommandAdmission', 'openheartSurg', 'otherMechSupport', 'PaO2300', 'PaO260',
    'PaO2min', 'percutCoronIntervention', 'perivascD', 'pneumonia', 'prevHealth', 'prophylacticAnticonvulsant',
    'raiseArms', 'rankinPrior', 'rearrest', 'renalD', 'sedationForSeizure', 'seizureAfterTargTemp',
    'seizureBeforeTargTemp', 'seizureDuringTargTemp', 'seizureGeneral', 'seizureNone', 'seizurePartial',
    'seizureSubtle', 'sex', 'shiver', 'shock', 'smoker', 'spontBreath', 'SSEP', 'targTemp', 'targTempAchieved',
    'targTempAdditional', 'targTempAdmin', 'targTempArrythmia', 'targTempAwoke', 'targTempBleed', 'targTempBrady',
    'targTempError', 'targTempHDinstab', 'targTempInter', 'targTempRemoveLS', 'targTempSepsis', 'targTempStop',
    'tempCTRLpostwarm', 'thrombolysis', 'vasopressors', 'weight', 'witnessed']

# Convert column data to numeric type
df_original[columns_of_interest] = df_original[columns_of_interest].apply(pd.to_numeric, errors='coerce')
df_imputed[columns_of_interest] = df_imputed[columns_of_interest].apply(pd.to_numeric, errors='coerce')

# Create a directory for saving files if it doesn't exist
output_directory = r'C:\Users\Yamee\Downloads\EXTRA_IMPUTATION_ANALYSIS'
if not os.path.exists(output_directory):
    os.makedirs(output_directory)

# 1. Calculate summary statistics for original and imputed datasets
original_summary_stats = df_original.describe()
imputed_summary_stats = df_imputed.describe()

# Save summary statistics to Excel
summary_stats_excel_path = os.path.join(output_directory, "summary_statistics_knn_extra0.1.xlsx")
with pd.ExcelWriter(summary_stats_excel_path) as writer:
    original_summary_stats.to_excel(writer, sheet_name='Original Summary Stats')
    imputed_summary_stats.to_excel(writer, sheet_name='Imputed Summary Stats')

print("Summary statistics saved to Excel.")

# 2. Perform Kolmogorov-Smirnov test for each column
ks_results = {}
for column in columns_of_interest:
    ks_statistic, p_value = ks_2samp(df_original[column].dropna(), df_imputed[column].dropna())
    ks_results[column] = {'KS Statistic': ks_statistic, 'p-value': p_value}

# Convert KS test results to DataFrame
ks_results_df = pd.DataFrame.from_dict(ks_results, orient='index')

# Save KS test results to Excel
ks_test_excel_path = os.path.join(output_directory, "ks_test_results_knn_extra0.1.xlsx")
ks_results_df.to_excel(ks_test_excel_path, index_label='Column')

print("Kolmogorov-Smirnov test results saved to Excel.")

# 3. Perform t-tests for each column
ttest_results = {}
for column in columns_of_interest:
    t_statistic, p_value = ttest_ind(df_original[column].dropna(), df_imputed[column].dropna())
    ttest_results[column] = {'T Statistic': t_statistic, 'p-value': p_value}

# Convert t-test results to DataFrame
ttest_results_df = pd.DataFrame.from_dict(ttest_results, orient='index')

# Save t-test results to Excel
ttest_excel_path = os.path.join(output_directory, "t_test_results_knn_extra0.1.xlsx")
ttest_results_df.to_excel(ttest_excel_path, index_label='Column')

print("T-test results saved to Excel.")
